================================================ 
=== FILE: C:\Car-Insurance\Backend\insurance_system\insurance\views.py 
================================================ 
from rest_framework import viewsets
from rest_framework.permissions import IsAuthenticated, AllowAny
from .models import Company, User, Customer, InsurancePolicy
from .serializers import *
from .permissions import IsCompanyUserOrAdmin
from rest_framework.decorators import api_view, permission_classes
from rest_framework.response import Response
from rest_framework.permissions import IsAuthenticated
from rest_framework import viewsets
from .models import User
from .serializers import UserSerializer
from rest_framework.permissions import AllowAny
from rest_framework.views import APIView
from rest_framework import status
from .serializers import RegisterSerializer
from rest_framework.generics import GenericAPIView

class RegisterView(GenericAPIView):
    serializer_class = RegisterSerializer
    permission_classes = [AllowAny]

    def post(self, request):
        serializer = self.get_serializer(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response({"message": "Registration successful"}, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

class CompanyViewSet(viewsets.ModelViewSet):
    queryset = Company.objects.all()
    serializer_class = CompanySerializer
    permission_classes = [IsAuthenticated]


class UserViewSet(viewsets.ModelViewSet):
    queryset = User.objects.all()
    serializer_class = UserSerializer

    def get_permissions(self):
        if self.action == 'create':
            return [AllowAny()]
        return [IsAuthenticated()]

class CustomerViewSet(viewsets.ModelViewSet):
    serializer_class = CustomerSerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        # Prevent crash when Swagger is generating schema
        if getattr(self, 'swagger_fake_view', False):
            return Customer.objects.none()

        user = self.request.user
        if user.is_superuser:
            return Customer.objects.all()
        return Customer.objects.filter(company=user.company)


class InsurancePolicyViewSet(viewsets.ModelViewSet):
    serializer_class = InsurancePolicySerializer
    permission_classes = [IsAuthenticated]
    queryset = InsurancePolicy.objects.all()  # âœ… ADD THIS LINE

    def get_queryset(self):
        if getattr(self, 'swagger_fake_view', False):
            return InsurancePolicy.objects.none()

        user = self.request.user
        if user.is_superuser:
            return InsurancePolicy.objects.all()
        return InsurancePolicy.objects.filter(customer__company=user.company)


@api_view(['GET'])
@permission_classes([IsAuthenticated])
def get_user_info(request):
    return Response({
        'id': request.user.id,
        'username': request.user.username,
        'is_superuser': request.user.is_superuser
    }) 
================================================ 
=== FILE: C:\Car-Insurance\Backend\insurance_system\insurance\models.py 
================================================ 
from django.contrib.auth.models import AbstractUser
from django.db import models

class Company(models.Model):
    name = models.CharField(max_length=255)
    address = models.CharField(max_length=255)
    phone_number = models.CharField(max_length=20)
    service_expiration = models.DateField()

class User(AbstractUser):
    company = models.ForeignKey(Company, on_delete=models.CASCADE, null=True, blank=True)
    username = models.CharField(max_length=100, unique=True)
    password = models.CharField(max_length=255)
    email = models.EmailField()
    is_superadmin = models.BooleanField(default=False) 

class Customer(models.Model):
    full_name = models.CharField(max_length=100)
    national_id = models.CharField(max_length=10)
    address = models.CharField(max_length=255)
    phone = models.CharField(max_length=20)
    company = models.ForeignKey(Company, on_delete=models.CASCADE)
    service_expiration = models.DateField(null=True, blank=True)

class InsurancePolicy(models.Model):
    POLICY_TYPES = [
        ('Car', 'Car'),
        ('Fire', 'Fire'),
        ('Life', 'Life'),
    ]
    customer = models.ForeignKey(Customer, on_delete=models.CASCADE)
    policy_type = models.CharField(max_length=10, choices=POLICY_TYPES)
    start_date = models.DateField()
    end_date = models.DateField()
    details = models.TextField()
    payment_amount = models.DecimalField(max_digits=10, decimal_places=2) 
================================================ 
=== FILE: C:\Car-Insurance\Backend\insurance_system\insurance\serializers.py 
================================================ 
from rest_framework import serializers
from .models import Company, User, Customer, InsurancePolicy
from datetime import date, timedelta

class RegisterSerializer(serializers.Serializer):
    company_name = serializers.CharField(max_length=255)
    company_address = serializers.CharField()
    company_phone = serializers.CharField()
    username = serializers.CharField()
    password = serializers.CharField(write_only=True)

    def create(self, validated_data):
        company = Company.objects.create(
            name=validated_data['company_name'],
            address=validated_data['company_address'],
            phone_number=validated_data['company_phone'], 
            service_expiration=date.today() + timedelta(days=365),
        )
        user = User.objects.create_user(
            username=validated_data['username'],
            password=validated_data['password'],
            company=company,
        )
        return user

class CompanySerializer(serializers.ModelSerializer):
    class Meta:
        model = Company
        fields = '__all__'
class UserSerializer(serializers.ModelSerializer):
    is_superuser = serializers.SerializerMethodField()

    class Meta:
        model = User
        fields = ['id', 'username', 'email', 'company', 'is_superuser']

    def get_is_superuser(self, obj):
        return obj.is_superuser

class CustomerSerializer(serializers.ModelSerializer):
    class Meta:
        model = Customer
        fields = '__all__'

class InsurancePolicySerializer(serializers.ModelSerializer):
    class Meta:
        model = InsurancePolicy
        fields = '__all__'
 
================================================ 
=== FILE: C:\Car-Insurance\Backend\insurance_system\insurance\urls.py 
================================================ 
from django.urls import path, include
from rest_framework.routers import DefaultRouter
from .views import *


router = DefaultRouter()
router.register('companies', CompanyViewSet)
router.register('users', UserViewSet)
router.register('customers', CustomerViewSet, basename='customer')
router.register('policies', InsurancePolicyViewSet)

urlpatterns = [
    path('', include(router.urls)),
    path('me/', get_user_info),
    path('register/', RegisterView.as_view(), name='register'),
]

 
================================================ 
=== FILE: C:\Car-Insurance\Backend\insurance_system\insurance_system\settings.py 
================================================ 
"""
Django settings for insurance_system project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-8i%=_nw(whfn+snca53*qs(wv@qx-y&je!_w69log6)a3o5t()'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
ALLOWED_HOSTS = ['127.0.0.1', 'localhost']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'rest_framework',
    'insurance',
    'rest_framework_simplejwt',
    'drf_yasg',
]

SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        'Bearer': {
            'type': 'apiKey',
            'name': 'Authorization',
            'in': 'header',
            'description': 'JWT format: Bearer <your-token>',
        }
    }
}

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ]
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'insurance_system.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'insurance_system.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTH_USER_MODEL = 'insurance.User' 

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CORS_ALLOWED_ORIGINS = [
    'http://localhost:3000',
]
 
================================================ 
=== FILE: C:\Car-Insurance\Backend\insurance_system\insurance_system\urls.py 
================================================ 
from django.contrib import admin
from django.urls import path, include
from django.contrib import admin
from django.urls import path, include
from rest_framework import permissions
from drf_yasg.views import get_schema_view
from drf_yasg import openapi

schema_view = get_schema_view(
    openapi.Info(
        title="Insurance API",
        default_version='v1',
        description="API documentation for the Insurance App",
        contact=openapi.Contact(email="your@email.com"),
    ),
    public=True,
    permission_classes=[permissions.AllowAny],
    authentication_classes=[],  # don't enforce auth on docs
)

from rest_framework_simplejwt.views import (
    TokenObtainPairView,
    TokenRefreshView,
)
urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/', include('insurance.urls')),
    path('api/token/', TokenObtainPairView.as_view(), name='token_obtain_pair'),
    path('api/token/refresh/', TokenRefreshView.as_view(), name='token_refresh'),
    path('api/', include('insurance.urls')),
    path('swagger/', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'),
    path('redoc/', schema_view.with_ui('redoc', cache_timeout=0), name='schema-redoc'),
]

 
================================================ 
=== FILE: C:\Car-Insurance\Frontend\src\pages\Companies.jsx 
================================================ 
import React from 'react';

const Companies = () => {
  return (
    <div>
      <h2>Companies Page (For Superusers)</h2>
      <p>List of all companies will go here.</p>
    </div>
  );
};

export default Companies;
 
================================================ 
=== FILE: C:\Car-Insurance\Frontend\src\pages\Customers.jsx 
================================================ 
import React from 'react';

const Customers = () => {
  return (
    <div>
      <h2>Customers Page (For Company Users)</h2>
      <p>List of customers for the logged-in company user.</p>
    </div>
  );
};

export default Customers;
 
================================================ 
=== FILE: C:\Car-Insurance\Frontend\src\pages\Dashboard.jsx 
================================================ 
import React from 'react';

const Dashboard = () => {
  return (
    <div style={{ padding: '20px' }}>
      <h2>Dashboard</h2>
      <p>This is where youâ€™ll manage your customers and policies.</p>
    </div>
  );
};

export default Dashboard;
 
================================================ 
=== FILE: C:\Car-Insurance\Frontend\src\pages\Home.jsx 
================================================ 
// src/pages/Home.js
import React from 'react';

const Home = () => {
  return (
    <div style={{ padding: "20px" }}>
      <h1>Welcome to the Insurance App</h1>
      <p>Manage your customers and policies easily.</p>
    </div>
  );
};

export default Home;
 
================================================ 
=== FILE: C:\Car-Insurance\Frontend\src\pages\Login.jsx 
================================================ 
import React, { useState } from 'react';
import api from '../api';
import { useNavigate } from 'react-router-dom';

const Login = () => {
  const [credentials, setCredentials] = useState({ username: '', password: '' });
  const navigate = useNavigate();

  const handleChange = (e) => {
    setCredentials({ ...credentials, [e.target.name]: e.target.value });
  };

  const handleSubmit = async (e) => {
  e.preventDefault();
  try {
    const res = await api.post('token/', credentials);
    localStorage.setItem('access', res.data.access);
    localStorage.setItem('refresh', res.data.refresh);

    const userRes = await api.get('me/');
    const isSuperuser = userRes.data.is_superuser;

    if (isSuperuser) {
      navigate('/companies');
    } else {
      navigate('/customers');
    }
  } catch (err) {
    alert('Invalid credentials');
  }
};

  return (
    <div style={{ padding: '20px' }}>
      <h2>Login</h2>
      <form onSubmit={handleSubmit}>
        <input name="username" placeholder="Username" onChange={handleChange} required /><br />
        <input type="password" name="password" placeholder="Password" onChange={handleChange} required /><br />
        <button type="submit">Login</button>
      </form>
    </div>
  );
};

export default Login;
 
================================================ 
=== FILE: C:\Car-Insurance\Frontend\src\pages\Register.jsx 
================================================ 
import { useState } from 'react';
import api from '../api';
import { useNavigate } from 'react-router-dom';

const Register = () => {
  const [form, setForm] = useState({
    company_name: '',
    address: '',
    phone: '',
    username: '',
    password: '',
  });

  const navigate = useNavigate();

  const handleChange = e => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  const handleSubmit = async e => {
    e.preventDefault();
    try {
      const companyRes = await api.post('register/', {
        company_name: form.company_name,
        company_address: form.address,
        company_phone: form.phone,
        username: form.username,
        password: form.password,
      });

      

      alert('Company registered! You can now log in.');
      navigate('/login');
    } catch (error) {
      console.error(error);
      alert('Registration failed.');
    }
  };

  return (
    <div>
      <h2>Register a Company</h2>
      <form onSubmit={handleSubmit}>
        <input name="company_name" placeholder="Company Name" onChange={handleChange} required />
        <input name="address" placeholder="Address" onChange={handleChange} required />
        <input name="phone" placeholder="Phone" onChange={handleChange} required />
        <input name="username" placeholder="Username" onChange={handleChange} required />
        <input type="password" name="password" placeholder="Password" onChange={handleChange} required />
        <button type="submit">Register</button>
      </form>
    </div>
  );
};

export default Register;
 
================================================ 
=== FILE: C:\Car-Insurance\Frontend\src\components\CompanyList.js 
================================================ 
// src/components/CompanyList.js
import React from 'react';
import { useQuery } from '@tanstack/react-query';
import api from '../api';

const fetchCompanies = async () => {
  const { data } = await api.get('http://localhost:8000/api/companies/');
  return data;
};

function CompanyList() {
  const { data, error, isLoading } = useQuery({
  queryKey: ['companies'],
  queryFn: fetchCompanies,
});

    if (isLoading) return <p>Loading...</p>;
if (error) return <p>Error loading companies</p>;
if (!data) return <p>No data available</p>;

return (
  <div>
    <h2>Companies</h2>
    {data.map(company => (
      <div key={company.id} className="card">
        <p><strong>Name:</strong> {company.name}</p>
        <p><strong>Phone:</strong> {company.phone_number}</p>
        <p><strong>Expires:</strong> {company.service_expiration}</p>
      </div>
    ))}
  </div>
);
}

export default CompanyList;
 
================================================ 
=== FILE: C:\Car-Insurance\Frontend\src\components\CustomerList.js 
================================================ 
import React from 'react';
import { useQuery } from '@tanstack/react-query';
import api from '../api';

const fetchCustomers = async () => {
  const { data } = await api.get('customers/');
  return data;
};

export default function CustomerList() {
  const { data, isLoading, error } = useQuery({
    queryKey: ['customers'],
    queryFn: fetchCustomers,
  });

  if (isLoading) return <p>Loading...</p>;
  if (error) return <p>Error loading customers</p>;
  if (!data || data.length === 0) return <p>No customers found.</p>;

  return (
    <div>
      <h2>Your Customers</h2>
      {data.map(c => (
        <div key={c.id} className="card">
          <p><strong>Name:</strong> {c.name}</p>
          <p><strong>Phone:</strong> {c.phone_number}</p>
          <p><strong>National ID:</strong> {c.national_id}</p>
        </div>
      ))}
    </div>
  );
}
 
================================================ 
=== FILE: C:\Car-Insurance\Frontend\src\components\Header.js 
================================================ 
// src/components/Header.js
import React from 'react';
import { Link, useNavigate } from 'react-router-dom';
import './Header.css';

const Header = () => {
  const token = localStorage.getItem('access');
  const navigate = useNavigate();

  const handleLogout = () => {
    localStorage.removeItem('access');
    localStorage.removeItem('refresh');
    navigate('/login');
  };

  return (
    <header className="header">
      <div className="logo">Insurance App</div>
      <nav className="nav">
        <Link to="/">Home</Link>
        {!token && <Link to="/register">Sign Up</Link>}
        {!token && <Link to="/login">Login</Link>}
        {token && <button onClick={handleLogout}>Logout</button>}
      </nav>
    </header>
  );
};

export default Header;
     
================================================ 
=== FILE: C:\Car-Insurance\Frontend\src\components\LoginForm.js 
================================================ 
import React, { useState } from 'react';
import axios from 'axios';

function LoginForm({ onLogin }) {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');

  const handleLogin = async (e) => {
    e.preventDefault();
    try {
      const res = await axios.post('http://127.0.0.1:8000/api/token/', {
        username,
        password,
      });
      localStorage.setItem('access', res.data.access);
      localStorage.setItem('refresh', res.data.refresh);
      onLogin();  // callback to notify App
    } catch (err) {
      alert('Login failed');
    }
  };

  return (
    <form onSubmit={handleLogin}>
      <h2>Login</h2>
      <input value={username} onChange={e => setUsername(e.target.value)} placeholder="Username" />
      <input type="password" value={password} onChange={e => setPassword(e.target.value)} placeholder="Password" />
      <button type="submit">Login</button>
    </form>
  );
}

export default LoginForm;
 
================================================ 
=== FILE: C:\Car-Insurance\Frontend\src\api.js 
================================================ 
// src/api.js
import axios from 'axios';

const api = axios.create({
  baseURL: 'http://127.0.0.1:8000/api/',
});

api.interceptors.request.use(config => {
  const token = localStorage.getItem('access');
  if (token) config.headers.Authorization = `Bearer ${token}`;
  return config;
});

export default api;
 
================================================ 
=== FILE: C:\Car-Insurance\Frontend\src\App.jsx 
================================================ 
  // src/App.js
  import React from 'react';
  import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
  import Header from './components/Header';
  import Home from './pages/Home';
  import Login from './pages/Login';
  import Register from './pages/Register';
  import Dashboard from './pages/Dashboard';
  import Companies from './pages/Companies';
  import Customers from './pages/Customers';


  function App() {
    return (
      <Router>  
        <Header />
        <Routes>
          <Route path="/" element={<Home />} />
          <Route path="/register" element={<Register />} />
          <Route path="/login" element={<Login />} />
          <Route path="/dashboard" element={<Dashboard />} />
          <Route path="/companies" element={<Companies />} />
          <Route path="/customers" element={<Customers />} />
        </Routes>
      </Router>
    );
  }

  export default App;
 
================================================ 
=== FILE: C:\Car-Insurance\Frontend\src\index.js 
================================================ 
// src/index.js
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import './App.css';
import {
  QueryClient,
  QueryClientProvider,
} from '@tanstack/react-query';

const queryClient = new QueryClient();

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <QueryClientProvider client={queryClient}>
    <App />
  </QueryClientProvider>
);
 
